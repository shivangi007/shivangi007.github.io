Recently I was introduced to mariaDB and even though this product has been out there for a real long time(since 2009), it actually flourished in the last one year.
Now, for some of you the concept is well founded and you are probably thinking why am I even here reading this junk. However, for other mere mortals like me, I thought it would be wonderful to have a like an introduction to what mariaDb is capable of.
The creators of MariaDB decend from the mysql team, and they wanted to create a new database product. An open source product mariaDB still maintains high compatibility with mysql. 
Now question arises, why do we need a new DB in the first place. I agree, with so many products flowing left right and center 
do we really need another one? The reason, we should look into MariaDB and probably decide to move to it is simple. It is all encompassing and all knowing from OLTP to analytics to even machine learning. According to the creators, we can use the MariaDB infrastructure for almost everything data related, if it is relational DB requirements or scaling out deployments of your application. Even, column storage which is just another column storage engine for parallel distributed query execution and data loading. Neat, huh? So, to answer the whole do we really need MariaDB, I would say, it's pretty rad.
Now, what is the latest going on with it. There are a lot of MariaDB products that can be helpful, and I would give the links in the reference for people who want to learn more. I want to particularly talk about MariaDB Maxscale, which is mostly designed to scale web applications in a way they can handle high traffice from the User interface, and combine with Galera to give them high availablity. 
Let's discuss the Docker tool chain , which comprises of a swarm: which is nothing but a cluster of all docker engines: which is nothing but a collection of containers(runtime vessel of the image we want to run by our engine). The Docker machine which can be on a cloud or your local machine and gets our engine running. However, this version mostly is about orchestration via Docker-compose. 
Now, we all know the traditional problem of clusters, where containers are ephemeral and we need absolutely zero downtime while loading a copy of our data. Imagine, having a shut down in the peak traffic hours. We don't want now, do we? 
MaxScale provides the orchestration which gives us a solution to actually have more than one copy on the same network, so if we lose our containers, we don't have a downtime while switching to a copy. 
The MariaDB cluster has a component called the multi-master and this guarantees consistent performance by synchronized writing across the cluster. Voila! no need to worry about load balancing either. 
What attracts me most to the version of Maxscale is the Docker-Compose file which has a services tag. This tag can be used to define our network and we can have multiple applications and databases connected to the same network. We create an overlay network and add it in the compose.yml. A lot of databse proxy is used as you must have guessed already for seamless tranfer of data and for me that's having your cake and eating it too. I don't have worry about the master node either, in the cluster. Galera replaces the master node if the previous one is dead without much downtime. Amazing huh!? If you are still not impressed there is one last tag in the compose file which has superpowers. 
The secret tag; Used mostly for a container to use in case passowrds or such things are required. Everytime a container is initialized the secret files(text in format) are loaded in the ram disk within the container. 
This is all theory and I understand how overwhelming it can be, and with a vast, still growing, product like MariaDB, I wouldn't expect anything less! Hence, I have decided to make a small demo and put it up for people to get them started on Max Scale! watch this space!
